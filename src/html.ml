(** Html output module, does the translation vdoc -> html *)


open Vdoc
open Printf
open Cst

exception Unhandled_case

let initialize () = ()

let header () =
  (*FIXME: add title and charset *)
  "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n"              ^
  "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n"                  ^
  "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n"                   ^
  "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf8\"/>\n" ^
  "<link href=\"coqdoc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n"        ^
  "<title>FIXME: TITLE</title>\n</head>\n\n"                                  ^
  "<body>\n\n<div id=\"page\">\n\n<div id=\"header\">\n</div>\n\n"            ^
  "<div id=\"main\">\n\n"

let doc cst =
  let rec aux = function
    `Vernac s          -> sprintf"[%s]" s
    | `Pretty_print s  -> sprintf "[[%s]]" s
    | `Section (lvl,s) -> sprintf "<h%d>%s</h%d>" lvl s lvl
    | `Item (lvl,d)    -> sprintf "<ul>%d: %s</ul>" lvl (aux d)
    | `Hrule           -> "<hr/>"
    | `Emphasis d      -> sprintf "<b>%s</b>" (aux d)
    | `Raw raw         -> raw.html
    | `Verbatim s      -> sprintf"<tt>%s</tt>" s
    | `Content s       -> s
    | `List lst        -> List.fold_right (fun elt acc -> (aux elt) ^ acc)
    lst ""
    | _ -> raise Unhandled_case in
    try Some (aux cst) with
      Unhandled_case -> None

(* FIXME: make real function *)
let indent n = " "

let newline () = "<br />"

(*FIXME*)
let index lst = ""

let footer () =
	  "<hr/>This page has been generated by " ^
	  "<a href=\"#\">coqdoc</a>\n"            ^
	  "</div>\n\n</div>\n\n</body>\n</html>"

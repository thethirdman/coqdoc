------------------------------------------
| Development journal for coqdoc project |
------------------------------------------

28/11/12

Ce qu'il reste à faire pour lundi
  - Patch le parsing/lexing des listes (avoir une structure hiérarchisée)
    [FIXME]
  - Gestion des environnements: [DONE]
      - Le comportement du vieux coqdoc affiche la doc dans un div spécifique,
        tandis que le code est dans un autre div.
      - Il est possible d'avoir plusieurs balises Cst.Doc à la suite dans un
        document, si oui, doit on faire une phase de fusion ou une gestion
        des environnements ?
  || Voir avec les annotations
  ||Tables de symboles, gestion de la sortie de ceux ci:
  ||  - Faire un locate pour chaque id trouvé avec parse
  ||  - Eviter les collisions (i.e: que fait un locate sur un id rencontré
  ||    dans un prototype ?)
  ||Traduction des notations définies par l'utilisateur:
  ||  - Les stocker dans une table
  ||  - Au moment de l'écriture, faire un matching (coûteux ??)

  - Implémenter les primitives de coq-tex pour la sortie html
  - Patch le printing du code ? On reste sur parse, ou on passe à une version
    annotée sur laquelle on fera un traitement ?

  - Mettre en place un système de post traitement: je prends un fichier
    coq-tex, je le traite pour sortir un .tex; Il pouvoir build-in le
    post-traitement ??
  - Commencer les .vdocs
  - Réfléchir aux use-cases


31/10/12
                                          /\
                                         / /
                                      __( (__
                                  .-'(    `' )`-.
                                ./    `"""""'    \.
                               /     ___   ___     \
                              /        \\ //        \
                             ;       /\      /\      ;
                            ;       /O_\    /O_\      ;
                            |            /\           |
                            ;            ~~           ;
                             ;     /\.        ./\    ;
                              \   |/`\\/\/\/\//`\|  /
                               \      \/\/\/\/     /
                                `\               /'
                                  `-..___..__..-'

22/10/12
  Ce qu'il reste à faire:
    - Avoir un front-end generique: pour l'instant, celui ci est directement
      orienté coqdoc. On veut pouvoir gérer coqtex de manière intelligente

    - La "chaîne de compilation" est relativement bien posée. Il reste à la
      raffiner et il faut commencer à définir également les commandes que l'on
      veut rajouter dans le langage des .v. Egalement, il faut réfléchir sur
      l'extensibilité du Cst.doc, et comment rendre cela accessible à
      l'utilisateur
    - De l'autre coté, il faut améliorer la commande parse du protocole xml,
      pour qu'elle mette en forme le code source de coq. Mon idée, plutôt que
      de traiter les types Vernac_expr et constr_expr est de refaire un parser
      qui extraie les informations dont on a besoin à partir des lexemes
      (notamment monter un cst)
    - Coté back-end, les bases sont posées. Il faut commencer également à
      voir ce que l'on veut donner par défaut comme éléments à l'utilisateur,
      et réfléchir sur l'extensibilité de la sortie.
    - L'ajout d'un format de sortie .vdoc est également à faire, cela devrait
      être facile à faire
    - Enfin, cf 17/10/12, il faudrait du code review sur la chaine de
      compilation, surtout au niveau des types.

17/10/12
  - On utilise des variants polymorphes pour le type Cst.doc:
      c'est cool, on est extensible en entrée et en sortie au niveau
      des types (on pourrait imaginer permettre à l'utilisateur d'étendre
      la grammaire d'entrée). Quid de la sécurité ???
  - Pour l'instant, le type ast est moche. C'est un variant bête : soit
    de la doc, soit une requête. Après évaluation, tout les éléments de
    l'ast doivent être de type doc. On voudrait plus de contraintes sur
    le type.
  - la fonction to_output s'occupe de la sortie. Elle prend une fonction
    définie par l'utilisateur, qui sera appliquée sur l'AST. A l'heure
    actuelle, celle ci renvoie du type string option. Si son retour est
    None, on applique la fonction par défaut.
    Cela manque clairement de sureté au niveau des types. Peut-être existe
    t'il une meilleure solution ???

25/09/12
  - Patch les coordonnées de l'AST
  - Le lexer de coqdoc-old est intégré. Il faut finaliser la conversion
    entrée -> AST (pour l'instant, seulement le verbatim)
  - Ajout d'un fichier vdoc.ml qui contient le type Vdoc (début d'ast)

24/09/12
  - Extraction des coordonnées dans l'AST faite

18/09/12:
  - Definir clairement ce que l'on veut obtenir de parser: identifiants,
      mots clefs ?
      (doit permettre de définir un type, et de savoir quels éléments on
      doit extraire de l'AST)


  - Décider à propos de la refonte complète du protocole  (pour suivre
    commande/requêtes)
  - Implémenter un CST dans coq ?
  - Commencer à définir la spécification du langage des .vdoc
